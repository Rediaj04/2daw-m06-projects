/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.openapitools.model.ModelObject;
import org.openapitools.model.ObjectRequest;
import org.openapitools.model.ObjectResponse;
import org.openapitools.model.ObjectsIdDelete200Response;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-24T18:55:33.945312570+01:00[Europe/Madrid]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "objects", description = "the objects API")
public interface ObjectsApi {

    List<ModelObject> lista = new ArrayList<>();

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /objects : List all objects
     * Returns a list of all objects
     *
     * @return A JSON array of objects (status code 200)
     */
    @Operation(
        operationId = "objectsGet",
        summary = "List all objects",
        description = "Returns a list of all objects",
        responses = {
            @ApiResponse(responseCode = "200", description = "A JSON array of objects", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ModelObject.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/objects",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ModelObject>> objectsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"data\" : { \"key\" : \"\" }, \"name\" : \"name\", \"id\" : \"id\" }, { \"data\" : { \"key\" : \"\" }, \"name\" : \"name\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /objects/{id} : Delete an object
     *
     * @param id  (required)
     * @return Deletion confirmation (status code 200)
     */
    @Operation(
        operationId = "objectsIdDelete",
        summary = "Delete an object",
        responses = {
            @ApiResponse(responseCode = "200", description = "Deletion confirmation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectsIdDelete200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/objects/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ObjectsIdDelete200Response> objectsIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /objects/{id} : Get a single object
     *
     * @param id  (required)
     * @return The requested object (status code 200)
     */
    @Operation(
        operationId = "objectsIdGet",
        summary = "Get a single object",
        responses = {
            @ApiResponse(responseCode = "200", description = "The requested object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/objects/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ModelObject> objectsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"key\" : \"\" }, \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /objects/{id} : Partially update an object
     *
     * @param id  (required)
     * @param body  (required)
     * @return Partially updated object (status code 200)
     */
    @Operation(
        operationId = "objectsIdPatch",
        summary = "Partially update an object",
        responses = {
            @ApiResponse(responseCode = "200", description = "Partially updated object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/objects/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ObjectResponse> objectsIdPatch(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody ObjectRequest body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"data\" : { \"key\" : \"\" }, \"name\" : \"name\", \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /objects/{id} : Update an object
     *
     * @param id  (required)
     * @param objectRequest  (required)
     * @return Updated object (status code 200)
     */
    @Operation(
        operationId = "objectsIdPut",
        summary = "Update an object",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/objects/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ObjectResponse> objectsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "ObjectRequest", description = "", required = true) @Valid @RequestBody ObjectRequest objectRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"data\" : { \"key\" : \"\" }, \"name\" : \"name\", \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /objects : Add a new object
     *
     * @param objectRequest  (required)
     * @return Object successfully created (status code 201)
     */
    @Operation(
        operationId = "objectsPost",
        summary = "Add a new object",
        responses = {
            @ApiResponse(responseCode = "201", description = "Object successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ObjectResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/objects",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ObjectResponse> objectsPost(
        @Parameter(name = "ObjectRequest", description = "", required = true) @Valid @RequestBody ObjectRequest objectRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"data\" : { \"key\" : \"\" }, \"name\" : \"name\", \"id\" : \"id\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
